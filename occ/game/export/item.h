#pragma once

#include "actor.h"

class Item : public Actor
{
 public:
  Item(geometry::Position position, Sprite sprite, TouchType touch_type)
    : Actor(position, geometry::Size(16, 16)),
      sprite_(sprite),
      touch_type_(touch_type)
  {
  }

  virtual bool is_alive() const override { return is_alive_; }
  virtual TouchType on_touch() override
  {
    is_alive_ = false;
    return touch_type_;
  }
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override
  {
    return {{position, sprite_}};
  }

 private:
  Sprite sprite_;
  bool is_alive_ = true;
  TouchType touch_type_;
};

class Crystal : public Item
{
  // â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œğŸŸ¥â¬›â¬›â¬›
  // â¬›â¬›â¬œğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸŸ¥ğŸŸ¥ğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸŸ¥â¬›â¬›
  // â¬›â¬œğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸŸ¥ğŸŸ¥ğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸŸ¥ğŸŸ¥â¬›
  // â¬œğŸš¨â¬œğŸš¨â¬œğŸŸ¥â¬œâ¬œâ¬œâ¬œâ¬œğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥
  // â¬œğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸŸ¥ğŸš¨ğŸŸ¥ğŸŸ¥
  // â¬›â¬œğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸš¨ğŸŸ¥â¬›
  // â¬›â¬›â¬œğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸŸ¥ğŸš¨ğŸŸ¥â¬›â¬›
  // â¬›â¬›â¬›â¬œğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸŸ¥â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬œğŸš¨ğŸš¨ğŸš¨ğŸŸ¥ğŸŸ¥ğŸš¨ğŸŸ¥â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬œğŸš¨ğŸš¨ğŸŸ¥ğŸš¨ğŸŸ¥â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬œğŸš¨ğŸŸ¥ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // Gives score, need to collect all to finish level
  // TODO: collect all crystals
 public:
  Crystal(geometry::Position position, Sprite sprite) : Item(position, sprite, TouchType::TOUCH_TYPE_SCORE) {}

  virtual int get_points() const override { return 50; }
};


class Ammo : public Item
{
  // â¬›â¬›â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸª¦â¬›â¬›ğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›ğŸ©µâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›
  // â¬›â¬›ğŸ©µâšªâšªâšªâšªâšªâšªâšªâšªğŸ©µğŸ©µğŸ©µğŸ©µâ¬›
  // â¬›â¬›â¬›ğŸ©µâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›
  // â¬›â¬›â¬›ğŸ©µâšªâšªğŸš¨ğŸŸ¥â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›
  // â¬›â¬›ğŸ©µâšªâšªğŸª¦ğŸš¨ğŸŸ¥â¬›ğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›ğŸ©µâšªâšªğŸª¦â¬›ğŸª¦ğŸª¦ğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›ğŸ©µâšªğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›ğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // Gives ammo
 public:
  Ammo(geometry::Position position) : Item(position, Sprite::SPRITE_PISTOL, TouchType::TOUCH_TYPE_AMMO) {}
};


class ScoreItem : public Item
{
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸŸ¥ğŸš¨ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸŸ¥ğŸš¨ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›âšªâ¬œâ¬œâ¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›
  // â¬›â¬›â¬›â¬›âšªâ¬œâ¬œâ¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›ğŸŸ¨â¬›
  // â¬›â¬›â¬›â¬›âšªâ¬œâšªâ¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›ğŸŸ â¬›
  // â¬›â¬›â¬›â¬›âšªâ¬œâšªâ¬›â¬›â¬›â¬›â¬›ğŸŸ ğŸŸ â¬›â¬›
  // â¬›â¬›â¬›âšªâ¬œâ¬œâšªâšªâ¬›â¬›â¬›ğŸŸ â¬›â¬›â¬›â¬›
  // â¬›â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ ğŸŸ ğŸŸ ğŸŸ ğŸŸ ğŸŸ â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // Generic item that gives score
  // TODO: different sounds
 public:
  ScoreItem(geometry::Position position, Sprite sprite, int score) : Item(position, sprite, TouchType::TOUCH_TYPE_SCORE), score_(score) {}

  virtual int get_points() const override { return score_; }

 private:
  int score_;
};

class Key : public Item
{
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›
  // Gives player ability to open chests
 public:
  Key(geometry::Position position) : Item(position, Sprite::SPRITE_KEY, TouchType::TOUCH_TYPE_KEY) {}
};


class Power : public Item
{
  // â¬›â¬›â¬›â¬›â¬›â¬œâšªâšªâšªâšªğŸª¦â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬œâ¬œâšªâšªâšªâšªâšªâšªğŸª¦ğŸª¦â¬›â¬›â¬›
  // â¬›â¬›â¬œâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªğŸª¦â¬›â¬›
  // â¬›â¬›â¬œâšªâšªğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâšªâšªğŸª¦â¬›â¬›
  // â¬›â¬œâšªâšªâšªğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâšªâšªğŸª¦â¬›
  // â¬›â¬œâšªâšªâšªğŸŸ¥ğŸŸ¥âšªâšªğŸŸ¥ğŸŸ¥âšªâšªâšªğŸª¦â¬›
  // â¬›â¬œâšªâšªâšªğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâšªâšªğŸª¦â¬›
  // â¬›â¬œâšªâšªâšªğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâšªâšªâšªğŸª¦â¬›
  // â¬›â¬œâšªâšªâšªğŸŸ¥ğŸŸ¥âšªâšªâšªâšªâšªâšªâšªğŸª¦â¬›
  // â¬›â¬œâšªâšªâšªğŸŸ¥ğŸŸ¥âšªâšªâšªâšªâšªâšªâšªğŸª¦â¬›
  // â¬›â¬›â¬œâšªâšªğŸŸ¥ğŸŸ¥âšªâšªâšªâšªâšªâšªğŸª¦â¬›â¬›
  // â¬›â¬›â¬œâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªğŸª¦â¬›â¬›
  // â¬›â¬›â¬›â¬œâ¬œâšªâšªâšªâšªâšªâšªğŸª¦ğŸª¦â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬œâšªâšªâšªâšªğŸª¦â¬›â¬›â¬›â¬›â¬›
  // Gives player timed power shots that can kill tough enemies
 public:
  Power(geometry::Position position) : Item(position, Sprite::SPRITE_POWER, TouchType::TOUCH_TYPE_POWER) {}
};

// TODO: egg
// TODO: gravity