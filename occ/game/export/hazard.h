#pragma once
#include <utility>

#include "actor.h"
#include "geometry.h"
#include "misc.h"
#include "sprite.h"

struct Level;
class Spider;

class Hazard : public Actor
{
 public:
  Hazard(geometry::Position position) : Actor(position, geometry::Size(16, 16)) {}
  virtual ~Hazard() = default;
};

class AirTank : public Hazard
{
  // â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›ğŸª¦
  // â¬œâ¬›âšªğŸŸ¥ğŸŸ¥âšªâšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâ¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥âšªâšªğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥âšªâšªğŸŸ¥â¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâ¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥âšªâšªğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥âšªğŸŸ¥âšªâ¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥âšªâšªğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥âšªâšªğŸŸ¥â¬›ğŸª¦
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›ğŸª¦
  // â¬œâ¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›ğŸª¦
  // â¬œâ¬›â¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›ğŸª¦
  // â¬œâ¬›â¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›ğŸª¦
  // â¬œâ¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›ğŸª¦
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâ¬›â¬œâ¬›âšªâšªâ¬›ğŸª¦
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâ¬›â¬œâ¬›âšªâšªâ¬›ğŸª¦
  // â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸª¦
  // â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›
  // Die if shot
 public:
  AirTank(geometry::Position position, bool top) : Hazard(position), top_(top) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;

 private:
  bool top_;
  int frame_ = 0;
};

class LaserBeam;

class Laser : public Hazard
{
  // âš«ğŸ©µğŸ©µâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸ”´ğŸŸ¥ğŸ©µğŸ©µâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªğŸ©µâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªâšªğŸ©µğŸ©µâš«âš«âš«âš«âš«âš«â¬œâš«
  // âš«ğŸ”´ğŸŸ¥âšªâšªâšªâšªâšªâ¬œâ¬œâ¬œâ¬œâ¬œâš«ğŸ“˜âš«
  // âš«ğŸ©µğŸ©µâšªğŸ©µâšªğŸ©µâšªâš«âšªâšªâšªğŸ“˜âš«ğŸ“˜âš«
  // âš«ğŸ©µğŸ©µğŸ©µâšªğŸ©µâšªğŸ©µâš«âšªâšªâšªğŸ“˜âš«ğŸ“˜âš«
  // âš«ğŸ”´ğŸŸ¥âšªâšªâšªâšªâšªâš«ğŸª¦ğŸª¦ğŸª¦ğŸª¦âš«ğŸ“˜âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªâšªğŸª¦ğŸª¦âš«âš«âš«âš«âš«âš«ğŸª¦âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªğŸª¦âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸ”´ğŸŸ¥ğŸª¦ğŸª¦âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸª¦ğŸª¦âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // Faces left/right, fires slow laser at player when they enter line
 public:
  Laser(geometry::Position position, bool left) : Hazard(position), left_(left) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, left_ ? Sprite::SPRITE_LASER_L : Sprite::SPRITE_LASER_R)};
  }
  virtual std::vector<geometry::Rectangle> get_detection_rects(const Level& level) const override
  {
    return create_detection_rects(left_ ? -1 : 1, 0, level);
  }
  void remove_child() { child_ = nullptr; }

 private:
  bool left_;
  LaserBeam* child_ = nullptr;
};

class LaserBeam : public Hazard
{
  // ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¥
  // â¬›ğŸŸ¥ğŸš¨ğŸš¨â¬›â¬›ğŸŸ¥â¬›ğŸš¨â¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥â¬›ğŸŸ¥â¬›
  // â¬›ğŸš¨ğŸŸ¥â¬›ğŸš¨ğŸŸ¥â¬›ğŸš¨â¬›ğŸš¨â¬›â¬›â¬›ğŸŸ¥â¬›ğŸš¨
  // ğŸš¨â¬›â¬›ğŸŸ¥ğŸŸ¥â¬›ğŸš¨â¬›ğŸŸ¥â¬›ğŸš¨ğŸš¨â¬›â¬›ğŸš¨â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸš¨â¬›â¬›â¬›â¬›â¬›â¬›ğŸš¨ğŸš¨â¬›â¬›
  // Moves left/right, disappear on collide or out of frame
 public:
  LaserBeam(geometry::Position position, bool left, Laser& parent) : Hazard(position), left_(left), parent_(parent) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, frame_ == 0 ? Sprite::SPRITE_LASER_BEAM_1 : Sprite::SPRITE_LASER_BEAM_2)};
  }
  virtual bool is_alive() const override { return alive_; }

 private:
  bool left_;
  int frame_ = 0;
  Laser& parent_;
  bool alive_ = true;
};

class Thorn : public Hazard
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // Thrusts up when player is above
 public:
  Thorn(geometry::Position position) : Hazard(position) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, static_cast<Sprite>(static_cast<int>(Sprite::SPRITE_THORN_1) + frame_))};
  }
  virtual std::vector<geometry::Rectangle> get_detection_rects(const Level& level) const override
  {
    return create_detection_rects(0, -1, level, true);
  }

 private:
  int frame_ = 0;
};

class SpiderWeb : public Hazard
{
  // â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›
  // â¬›âšªâ¬œâ¬œâ¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›
  // â¬›âšªâ¬›â¬›â¬œâ¬œâ¬œâšªâ¬›â¬›â¬›â¬œâ¬œâ¬œâšªâ¬›
  // â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬œâ¬œâ¬œâ¬›â¬›â¬›âšªâ¬›
  // â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬›â¬›
  // â¬›â¬›âšªâ¬œâ¬œâ¬›â¬›â¬›âšªâ¬›â¬›â¬œâ¬œâšªâ¬›â¬›
  // â¬›â¬›âšªâ¬›â¬›â¬œâ¬œâ¬œâšªâ¬œâ¬œâ¬›â¬›â¬›âšªâ¬›
  // â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬›
  // â¬›â¬›âšªâ¬œâ¬œâ¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›âšªâ¬›
  // â¬›âšªâ¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œâšªâ¬›â¬›â¬œâ¬œâšªâ¬›
  // â¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬œâ¬œâ¬›â¬›âšªâ¬›
  // â¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬›
  // â¬›âšªâ¬›â¬›â¬œâ¬œâ¬œâ¬œâšªâ¬œâ¬œâ¬›â¬›âšªâ¬›â¬›
  // â¬›âšªâ¬œâ¬œâ¬›â¬›â¬›â¬›âšªâ¬›â¬›â¬œâ¬œâšªâ¬›â¬›
  // Moves down, disappear on collide or out of frame
 public:
  SpiderWeb(geometry::Position position, Spider& parent) : Hazard(position), parent_(parent) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, Sprite::SPRITE_SPIDER_WEB)};
  }
  virtual bool is_alive() const override { return alive_; }

 private:
  Spider& parent_;
  bool alive_ = true;
};


class CorpseSlime : public Hazard
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸªğŸŸªğŸŸªğŸŸªâ¬›â¬›â¬›
  // â¬›â¬›ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸªâ¬›â¬›
  // â¬›ğŸŸªğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£â¬›
  //
  // â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©â¬›â¬›â¬›
  // â¬›ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›
  // Hurts player if they step on it; created by dead snake/tentacle
 public:
  CorpseSlime(geometry::Position position, Sprite sprite) : Hazard(position), sprite_(sprite) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, sprite_)};
  }

 private:
  Sprite sprite_;
};


class Droplet;

class Faucet : public Hazard
{
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâšªâšªâšªğŸª¦â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸ©µğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸ©µğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›â¬›
  // â¬›â¬›ğŸ©µğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºğŸ‡ªğŸ‡ºâ¬›
  // Drips droplet below
 public:
  Faucet(geometry::Position position) : Hazard(position) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, static_cast<Sprite>(static_cast<int>(Sprite::SPRITE_FAUCET_1) + frame_))};
  }
  void remove_child() { child_ = nullptr; }

 private:
  int frame_ = 0;
  Droplet* child_ = nullptr;
};

class Droplet : public Hazard
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸŸ¦ğŸ©µâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸ©µğŸ©µğŸ©µğŸŸ¦ğŸŸ¦â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸŸ¦ğŸ©µğŸ©µğŸŸ¦ğŸ©µğŸ©µğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›
  // Drops down, disappear on collide or out of frame
 public:
  Droplet(geometry::Position position, Faucet& parent) : Hazard(position), parent_(parent) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites([[maybe_unused]] const Level& level) const override
  {
    return {std::make_pair(position, frame_ == 0 ? Sprite::SPRITE_DROPLET_1 : Sprite::SPRITE_DROPLET_2)};
  }
  virtual bool is_alive() const override { return alive_; }

 private:
  bool left_;
  int frame_ = 0;
  Faucet& parent_;
  bool alive_ = true;
};