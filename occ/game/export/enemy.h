#pragma once
#include <utility>

#include "geometry.h"
#include "misc.h"
#include "sprite.h"

struct Level;

class Enemy
{
 public:
  Enemy(geometry::Position position, int health, int points) : position(std::move(position)), health(health), points(points) {}
  virtual ~Enemy() = default;

  virtual void update(const Level& level) = 0;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites() const = 0;

  geometry::Position position;
  int health;
  int points;
};

class Bigfoot : public Enemy
{
  // âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ©ğŸŸ©âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«âš«ğŸŸ©ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«
  // âš«âš«âš«ğŸŸ©ğŸŸ¢âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«
  // âš«âš«âš«ğŸŸ©ğŸŸ¦âš«ğŸ“˜â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«
  // âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¦âš«ğŸŸ¦â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«
  // âš«ğŸŸ©âš«ğŸŸ¢ğŸŸ¢ğŸŸ¦â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«â¬œâš«â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«â¬œâš«â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ©âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«â¬œâš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«â¬œğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ©âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©âš«âš«ğŸŸ©ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«â¬œâš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«â¬›âš«âš«
  // âš«ğŸŸ©ğŸŸ©âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«â¬›ğŸŸ¢âš«âš«
  // âš«ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ©âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ¢ğŸŸ¢â¬›âš«
  // âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«â¬›ğŸŸ¢âš«
  // âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«â¬›ğŸŸ¢â¬›ğŸŸ¢â¬›âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢âš«âš«â¬›ğŸŸ¢â¬›ğŸŸ¢â¬›ğŸŸ¢âš«
  // 2-tile tall enemy, runs if they see player
 public:
  Bigfoot(geometry::Position position) : Enemy(position, 5, 5000) {}

  virtual void update(const Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites() const override;

 private:
  bool left_ = false;
  bool running_ = false;
  int frame_ = 0;
};

class Hopper : public Enemy
{
  // âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«â¬œğŸŸ¦âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ¢â¬œâ¬œğŸŸ¦ğŸŸ¦âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢â¬œâ¬œâ¬œğŸŸ¦âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«â¬œâ¬œâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«â¬œâ¬œğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸŸ¦ğŸŸ¦â¬œâ¬œğŸŸ¢âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸŸ¦ğŸŸ¦â¬œâ¬œâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«â¬œâ¬œâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // Moves left and right erratically
 public:
  Hopper(geometry::Position position) : Enemy(position, 1, 100) {}

  virtual void update(const Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites() const override;

 private:
  bool left_ = false;
  int frame_ = 0;
  int next_reverse_ = 0;
};

class Slime : public Enemy
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›
  // â¬›ğŸŸ©ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›
  // â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›
  // Flies around, pauses and changes directions erratically
 public:
  Slime(geometry::Position position) : Enemy(position, 1, 100) {}

  virtual void update(const Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites() const override;

 private:
  int dx_ = 1;
  int dy_ = 0;
  int frame_ = 0;
};

class Snake : public Enemy
{
  // âš«âš«âš«âš«ğŸŸªğŸŸ¨ğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«
  // âš«âš«ğŸŸ¥âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«
  // âš«ğŸŸ¥âš«âš«âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«âš«ğŸŸªğŸŸªğŸŸªâš«âš«ğŸŸªğŸŸªâš«âš«âš«ğŸŸªâš«
  // âš«âš«âš«ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸ£âš«âš«âš«ğŸŸª
  // âš«âš«âš«ğŸŸ£ğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªâš«
  // Moves left/right, pauses, leaves slime
 public:
  Snake(geometry::Position position) : Enemy(position, 2, 100) {}

  virtual void update(const Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites() const override;

 private:
  bool left_ = false;
  bool paused_ = false;
  int frame_ = 0;
};

class Spider : public Enemy
{
  // âš«ğŸŸ¢ğŸŸ¢âš«âš«âš«ğŸŸ¥âš«âš«ğŸŸ¥âš«âš«âš«ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«â¬œâš«ğŸŸ¥âš«âš«âš«âš«ğŸŸ¥âš«â¬œâš«âš«âš«
  // âš«âš«âš«ğŸŸ©âš«âš«ğŸŸ£ğŸ”µğŸ”µğŸŸ£âš«âš«ğŸŸ©âš«âš«âš«
  // âš«âš«âš«âš«ğŸŸ¢ğŸ”µğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸ”µğŸŸ¢âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«ğŸŸ¢ğŸ”µğŸ“˜ğŸ“˜ğŸ”µğŸŸ¢âš«âš«âš«âš«âš«
  // ğŸŸ¢ğŸŸ©â¬œğŸŸ¢ğŸŸ¢âš«ğŸ”µğŸ”µğŸ”µğŸ”µâš«ğŸŸ¢ğŸŸ¢â¬œğŸŸ©ğŸŸ¢
  // âš«âš«âš«âš«âš«ğŸ”µğŸ”µğŸŸ¦ğŸŸ¦ğŸ”µğŸ”µâš«âš«âš«âš«âš«
  // âš«âš«ğŸŸ¢ğŸŸ¢ğŸ”µğŸŸ¦ğŸŸ¦ğŸ“˜ğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ”µğŸŸ¢ğŸŸ¢âš«âš«
  // âš«ğŸŸ¢âš«ğŸ”µğŸ”µğŸŸ¦ğŸ“˜ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸ”µğŸ”µâš«ğŸŸ¢âš«
  // âš«â¬œâš«ğŸ”µğŸŸ¦ğŸ“˜ğŸ©µğŸ©µğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸ”µâš«â¬œâš«
  // âš«ğŸŸ©âš«ğŸ”µğŸŸ¦ğŸŸ¦ğŸ“˜ğŸ“˜ğŸ“˜ğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ”µâš«ğŸŸ©âš«
  // âš«ğŸŸ¢âš«ğŸ”µğŸ”µğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸ”µğŸ”µâš«ğŸŸ¢âš«
  // âš«ğŸŸ¢âš«âš«ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâš«âš«ğŸŸ¢âš«
  // ğŸŸ¢âš«âš«âš«âš«âš«ğŸ”µğŸ”µğŸ”µğŸ”µâš«âš«âš«âš«âš«ğŸŸ¢
  // Moves up and down, shoots webs ahead
 public:
  Spider(geometry::Position position) : Enemy(position, 1, 100) {}

  virtual void update(const Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites() const override;

 private:
  bool up_ = false;
  int frame_ = 0;
};
