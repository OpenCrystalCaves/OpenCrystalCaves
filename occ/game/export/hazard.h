// TODO: refactor and combine with Enemy
#pragma once
#include <utility>

#include "geometry.h"
#include "misc.h"
#include "sprite.h"

struct Level;

class Hazard
{
 public:
  Hazard(geometry::Position position) : position(position), detection_rect_() {}
  virtual ~Hazard() = default;

  virtual void update(const geometry::Rectangle& player_rect, Level& level) = 0;
  virtual Sprite get_sprite() const = 0;
  const geometry::Rectangle& get_detection_rect() const { return detection_rect_; }
  virtual bool is_alive() const { return true; }

  geometry::Position position;

 protected:
  geometry::Rectangle detection_rect_;
};

class AirTank : public Hazard
{
  // â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›ğŸª¦
  // â¬œâ¬›âšªğŸŸ¥ğŸŸ¥âšªâšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâ¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥âšªâšªğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥âšªâšªğŸŸ¥â¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥ğŸŸ¥ğŸŸ¥âšªâ¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥âšªâšªğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥âšªğŸŸ¥âšªâ¬›ğŸª¦
  // â¬œâ¬›ğŸŸ¥âšªâšªğŸŸ¥âšªğŸŸ¥ğŸŸ¥âšªğŸŸ¥âšªâšªğŸŸ¥â¬›ğŸª¦
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›ğŸª¦
  // â¬œâ¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›ğŸª¦
  // â¬œâ¬›â¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›ğŸª¦
  // â¬œâ¬›â¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›ğŸª¦
  // â¬œâ¬›âšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬›ğŸª¦
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâ¬›â¬œâ¬›âšªâšªâ¬›ğŸª¦
  // â¬œâ¬›âšªâšªâšªâšªâšªâšªâšªâ¬›â¬œâ¬›âšªâšªâ¬›ğŸª¦
  // â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸª¦
  // â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›
  // Die if shot
 public:
  AirTank(geometry::Position position, bool top) : Hazard(position), top_(top) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual Sprite get_sprite() const override;

 private:
  bool top_;
  int frame_ = 0;
};

class LaserBeam;

class Laser : public Hazard
{
  // âš«ğŸ©µğŸ©µâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸ”´ğŸŸ¥ğŸ©µğŸ©µâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªğŸ©µâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªâšªğŸ©µğŸ©µâš«âš«âš«âš«âš«âš«â¬œâš«
  // âš«ğŸ”´ğŸŸ¥âšªâšªâšªâšªâšªâ¬œâ¬œâ¬œâ¬œâ¬œâš«ğŸ“˜âš«
  // âš«ğŸ©µğŸ©µâšªğŸ©µâšªğŸ©µâšªâš«âšªâšªâšªğŸ“˜âš«ğŸ“˜âš«
  // âš«ğŸ©µğŸ©µğŸ©µâšªğŸ©µâšªğŸ©µâš«âšªâšªâšªğŸ“˜âš«ğŸ“˜âš«
  // âš«ğŸ”´ğŸŸ¥âšªâšªâšªâšªâšªâš«ğŸª¦ğŸª¦ğŸª¦ğŸª¦âš«ğŸ“˜âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªâšªğŸª¦ğŸª¦âš«âš«âš«âš«âš«âš«ğŸª¦âš«
  // âš«âš«ğŸ”´ğŸŸ¥âšªğŸª¦âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸ”´ğŸŸ¥ğŸª¦ğŸª¦âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸª¦ğŸª¦âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // Faces left/right, fires slow laser at player when they enter line
 public:
  Laser(geometry::Position position, bool left) : Hazard(position), left_(left)
  {
    if (left)
    {
      detection_rect_ = geometry::Rectangle(position.x() - 16 * 20, position.y(), 16 * 20 + 2, 16);
    }
    else
    {
      detection_rect_ = geometry::Rectangle(position.x() + 14, position.y(), 16 * 20, 16);
    }
  }

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual Sprite get_sprite() const override { return left_ ? Sprite::SPRITE_LASER_L : Sprite::SPRITE_LASER_R; }
  void remove_child() { child_ = nullptr; }

 private:
  bool left_;
  LaserBeam* child_ = nullptr;
};

class LaserBeam : public Hazard
{
  // ğŸŸ¥â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¥
  // â¬›ğŸŸ¥ğŸš¨ğŸš¨â¬›â¬›ğŸŸ¥â¬›ğŸš¨â¬›ğŸŸ¥ğŸŸ¥ğŸŸ¥â¬›ğŸŸ¥â¬›
  // â¬›ğŸš¨ğŸŸ¥â¬›ğŸš¨ğŸŸ¥â¬›ğŸš¨â¬›ğŸš¨â¬›â¬›â¬›ğŸŸ¥â¬›ğŸš¨
  // ğŸš¨â¬›â¬›ğŸŸ¥ğŸŸ¥â¬›ğŸš¨â¬›ğŸŸ¥â¬›ğŸš¨ğŸš¨â¬›â¬›ğŸš¨â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸš¨â¬›â¬›â¬›â¬›â¬›â¬›ğŸš¨ğŸš¨â¬›â¬›
  // Moves left/right, disappear on collide or out of frame
 public:
  LaserBeam(geometry::Position position, bool left, Laser& parent) : Hazard(position), left_(left), parent_(parent) {}

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual Sprite get_sprite() const override { return frame_ == 0 ? Sprite::SPRITE_LASER_BEAM_1 : Sprite::SPRITE_LASER_BEAM_2; }
  virtual bool is_alive() const override { return alive_; }

 private:
  bool left_;
  int frame_ = 0;
  Laser& parent_;
  bool alive_ = true;
};

class Thorn : public Hazard
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // Thrusts up when player is above
 public:
  Thorn(geometry::Position position) : Hazard(position)
  {
    detection_rect_ = geometry::Rectangle(position.x(), position.y() - 16 * 2, 16, 16 * 3);
  }

  virtual void update(const geometry::Rectangle& player_rect, Level& level) override;
  virtual Sprite get_sprite() const override { return static_cast<Sprite>(static_cast<int>(Sprite::SPRITE_THORN_1) + frame_); }

 private:
  int frame_ = 0;
};
