#pragma once
#include <utility>

#include "actor.h"
#include "geometry.h"
#include "misc.h"
#include "sprite.h"

struct Level;
class SpiderWeb;

class Enemy : public Actor
{
 public:
  Enemy(geometry::Position position, geometry::Size size, int health) : Actor(position, size), health(health) {}
  virtual ~Enemy() = default;

  virtual bool is_alive() const override { return health > 0; }
  virtual void on_hit(AbstractSoundManager& sound_manager, const bool power) override;
  virtual void on_death(AbstractSoundManager& sound_manager, Level& level);
  // Whether this enemy requires the power powerup to hit/kill
  virtual bool is_tough() const { return false; }
  virtual HurtType hurt_type() const override { return HurtType::HURT_TYPE_NORMAL; }

  int health;

 protected:
  bool should_reverse(const Level& level) const;
};

class Bigfoot : public Enemy
{
  // âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ©ğŸŸ©âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«âš«ğŸŸ©ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«
  // âš«âš«âš«ğŸŸ©ğŸŸ¢âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«
  // âš«âš«âš«ğŸŸ©ğŸŸ¦âš«ğŸ“˜â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«
  // âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¦âš«ğŸŸ¦â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«
  // âš«ğŸŸ©âš«ğŸŸ¢ğŸŸ¢ğŸŸ¦â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«â¬œâš«â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«â¬œâš«â¬œâš«ğŸŸ¢ğŸŸ¢ğŸŸ©âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«â¬œâš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«â¬œğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ©âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©âš«âš«ğŸŸ©ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«â¬œâš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«â¬›âš«âš«
  // âš«ğŸŸ©ğŸŸ©âš«âš«âš«âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«â¬›ğŸŸ¢âš«âš«
  // âš«ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ©âš«ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«ğŸŸ¢ğŸŸ¢â¬›âš«
  // âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ©ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«â¬›ğŸŸ¢âš«
  // âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«â¬›ğŸŸ¢â¬›ğŸŸ¢â¬›âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢âš«âš«â¬›ğŸŸ¢â¬›ğŸŸ¢â¬›ğŸŸ¢âš«
  // 2-tile tall enemy, runs if they see player
 public:
  Bigfoot(geometry::Position position) : Enemy(position - geometry::Position(0, 16), geometry::Size(16, 32), 5) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual std::vector<geometry::Rectangle> get_detection_rects(const Level& level) const override
  {
    return create_detection_rects(left_ ? -1 : 1, 0, level);
  }
  virtual void on_hit(AbstractSoundManager& sound_manager, const bool power) override
  {
    Enemy::on_hit(sound_manager, power);
    running_ = true;
  }
  virtual int get_points() const override { return 5000; }

 private:
  bool left_ = false;
  bool running_ = false;
  int frame_ = 0;
};

class Hopper : public Enemy
{
  // âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«â¬œğŸŸ¦âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«âš«ğŸŸ¢â¬œâ¬œğŸŸ¦ğŸŸ¦âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢â¬œâ¬œâ¬œğŸŸ¦âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«â¬œâ¬œâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«ğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«â¬œâ¬œğŸŸ¢ğŸŸ¢ğŸŸ¢âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸŸ¦ğŸŸ¦â¬œâ¬œğŸŸ¢âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«ğŸŸ¦ğŸŸ¦â¬œâ¬œâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«â¬œâ¬œâš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«âš«
  // Moves left and right erratically
 public:
  Hopper(geometry::Position position) : Enemy(position, geometry::Size(16, 16), 1) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual int get_points() const override { return 100; }

 private:
  bool left_ = false;
  int frame_ = 0;
  int next_reverse_ = 0;
};

class Slime : public Enemy
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›
  // â¬›ğŸŸ©ğŸŸ©ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›
  // â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬œâ¬›ğŸ¦šâ¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸ¦šğŸ¦šğŸ¦šğŸ¦šâ¬›â¬›
  // Flies around, pauses and changes directions erratically
 public:
  Slime(geometry::Position position) : Enemy(position, geometry::Size(16, 16), 1) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual int get_points() const override { return 100; }

 private:
  int dx_ = 1;
  int dy_ = 0;
  int frame_ = 0;
};

class Snake : public Enemy
{
  // âš«âš«âš«âš«ğŸŸªğŸŸ¨ğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«
  // âš«âš«ğŸŸ¥âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«
  // âš«ğŸŸ¥âš«âš«âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸ£ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸ£ğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«âš«ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«ğŸŸªğŸŸªğŸŸªâš«âš«âš«âš«âš«âš«âš«âš«
  // âš«âš«âš«âš«ğŸŸªğŸŸªğŸŸªâš«âš«ğŸŸªğŸŸªâš«âš«âš«ğŸŸªâš«
  // âš«âš«âš«ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªğŸŸ£âš«âš«âš«ğŸŸª
  // âš«âš«âš«ğŸŸ£ğŸŸªğŸŸªğŸŸªğŸŸªâš«âš«ğŸŸªğŸŸªğŸŸªğŸŸªğŸŸªâš«
  // Moves left/right, pauses, leaves slime
 public:
  Snake(geometry::Position position) : Enemy(position, geometry::Size(16, 16), 2) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual void on_death(AbstractSoundManager& sound_manager, Level& level) override;
  virtual int get_points() const override { return 100; }

 private:
  bool left_ = false;
  bool paused_ = false;
  int frame_ = 0;
};

class Spider : public Enemy
{
  // âš«ğŸŸ¢ğŸŸ¢âš«âš«âš«ğŸŸ¥âš«âš«ğŸŸ¥âš«âš«âš«ğŸŸ¢ğŸŸ¢âš«
  // âš«âš«âš«â¬œâš«ğŸŸ¥âš«âš«âš«âš«ğŸŸ¥âš«â¬œâš«âš«âš«
  // âš«âš«âš«ğŸŸ©âš«âš«ğŸŸ£ğŸ”µğŸ”µğŸŸ£âš«âš«ğŸŸ©âš«âš«âš«
  // âš«âš«âš«âš«ğŸŸ¢ğŸ”µğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸ”µğŸŸ¢âš«âš«âš«âš«
  // âš«âš«âš«âš«âš«ğŸŸ¢ğŸ”µğŸ“˜ğŸ“˜ğŸ”µğŸŸ¢âš«âš«âš«âš«âš«
  // ğŸŸ¢ğŸŸ©â¬œğŸŸ¢ğŸŸ¢âš«ğŸ”µğŸ”µğŸ”µğŸ”µâš«ğŸŸ¢ğŸŸ¢â¬œğŸŸ©ğŸŸ¢
  // âš«âš«âš«âš«âš«ğŸ”µğŸ”µğŸŸ¦ğŸŸ¦ğŸ”µğŸ”µâš«âš«âš«âš«âš«
  // âš«âš«ğŸŸ¢ğŸŸ¢ğŸ”µğŸŸ¦ğŸŸ¦ğŸ“˜ğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ”µğŸŸ¢ğŸŸ¢âš«âš«
  // âš«ğŸŸ¢âš«ğŸ”µğŸ”µğŸŸ¦ğŸ“˜ğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸ”µğŸ”µâš«ğŸŸ¢âš«
  // âš«â¬œâš«ğŸ”µğŸŸ¦ğŸ“˜ğŸ©µğŸ©µğŸ©µğŸ©µğŸ“˜ğŸŸ¦ğŸ”µâš«â¬œâš«
  // âš«ğŸŸ©âš«ğŸ”µğŸŸ¦ğŸŸ¦ğŸ“˜ğŸ“˜ğŸ“˜ğŸ“˜ğŸŸ¦ğŸŸ¦ğŸ”µâš«ğŸŸ©âš«
  // âš«ğŸŸ¢âš«ğŸ”µğŸ”µğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸ”µğŸ”µâš«ğŸŸ¢âš«
  // âš«ğŸŸ¢âš«âš«ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâš«âš«ğŸŸ¢âš«
  // ğŸŸ¢âš«âš«âš«âš«âš«ğŸ”µğŸ”µğŸ”µğŸ”µâš«âš«âš«âš«âš«ğŸŸ¢
  // Moves up and down, shoots webs below
 public:
  Spider(geometry::Position position) : Enemy(position, geometry::Size(16, 16), 1) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual std::vector<geometry::Rectangle> get_detection_rects(const Level& level) const override
  {
    return create_detection_rects(0, 1, level);
  }
  void remove_child() { child_ = nullptr; }
  virtual int get_points() const override { return 100; }

 private:
  bool up_ = false;
  int frame_ = 0;
  SpiderWeb* child_ = nullptr;
};


class Rockman : public Enemy
{
  // â¬›â¬›â¬›â¬›â¬›âšªğŸª¦âšªğŸª¦âšªâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸª¦âšªğŸª¦âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦â¬›â¬›â¬›
  // â¬›â¬›âšªğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦â¬›ğŸª¦â¬›â¬›
  // â¬›âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦â¬›ğŸª¦â¬›
  // â¬›ğŸª¦âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦â¬›â¬›
  // â¬›âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦ğŸŸ ğŸª¦â¬›ğŸª¦â¬›ğŸª¦â¬›
  // â¬›ğŸª¦âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦â¬›ğŸª¦â¬›ğŸª¦â¬›ğŸª¦â¬›â¬›
  // â¬›â¬›ğŸª¦âšªğŸª¦âšªğŸª¦ğŸŸ ğŸª¦â¬›ğŸª¦â¬›ğŸª¦â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›ğŸŸªğŸŸªğŸŸ£ğŸŸ£â¬›ğŸŸ£ğŸŸ£â¬›â¬›â¬›â¬›
  // â¬›ğŸŸªğŸŸªâ¬›ğŸŸªğŸŸªğŸŸ£ğŸŸ£â¬›â¬›ğŸŸ£ğŸŸ£ğŸŸ£â¬›â¬›â¬›
  // â¬›â¬›ğŸŸªğŸŸªğŸŸªğŸŸ£ğŸŸ£â¬›â¬›ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£ğŸŸ£â¬›â¬›
  // Initially stopped, wakes on vision of player, moves left/right, needs P to kill
 public:
  Rockman(geometry::Position position) : Enemy(position, geometry::Size(16, 16), 1) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual std::vector<geometry::Rectangle> get_detection_rects(const Level& level) const override;
  virtual int get_points() const override { return 100; }
  virtual bool is_tough() const override { return true; }

 private:
  bool left_ = false;
  int frame_ = 0;
  bool asleep_ = true;
};

class MineCart : public Enemy
{
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ¨â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›
  // â¬›âšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâšªâ¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›â¬›
  // â¬›â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›â¬›
  // â¬›â¬›â¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬œâ¬œâ¬›ğŸª¦ğŸª¦ğŸª¦ğŸª¦â¬›â¬œâ¬œâ¬›â¬›â¬›
  // â¬›â¬›â¬œâ¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬œâ¬›â¬œâ¬œâ¬›â¬›
  // â¬›â¬›â¬œâ¬œâ¬›â¬œâ¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬œâ¬›â¬›
  // â¬›â¬›â¬›â¬œâ¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬›â¬›â¬›
  // Moves left/right and pauses at edges, needs P to kill
 public:
  MineCart(geometry::Position position) : Enemy(position, geometry::Size(16, 16), 1) {}

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  // TODO: confirm points
  virtual int get_points() const override { return 100; }
  virtual bool is_tough() const override { return true; }

 private:
  bool left_ = false;
  int frame_ = 0;
  int pause_frame_ = 0;
};


class Caterpillar : public Enemy
{
  // â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›ğŸ¦šğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©â¬›â¬œâ¬›ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ©ğŸŸ©â¬›â¬›ğŸ¦šâ¬›ğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸª¦â¬œğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸª¦â¬œğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ©â¬›ğŸ“˜â¬œğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬œâšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬œâšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›ğŸŸ©ğŸŸ¦â¬›ğŸŸ¦â¬œğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›â¬œâ¬›â¬›â¬›ğŸª¦âšªâ¬œâšªğŸª¦â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬œâ¬›â¬›â¬›ğŸª¦âšªâ¬œâšªğŸª¦â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
  // â¬›â¬›ğŸŸ©ğŸŸ¦â¬›â¬œğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›â¬œâšªğŸª¦ğŸª¦âšªâ¬œâšªğŸª¦ğŸª¦âšªâ¬œâ¬›â¬›â¬›â¬›â¬›â¬œâšªğŸª¦ğŸª¦âšªâ¬œâšªğŸª¦ğŸª¦âšªâ¬œâ¬›â¬›â¬›â¬›â¬›â¬›âšªâ¬œâšªâ¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›â¬›
  // â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›â¬›âšªâ¬œâšªğŸŸ©ğŸ¦šğŸŸ©ğŸª¦ğŸ¦šâšªâ¬œâšªâ¬›â¬›â¬›â¬›â¬›âšªâ¬œâšªğŸŸ©ğŸ¦šğŸŸ©ğŸª¦ğŸ¦šâšªâ¬œâšªâ¬›â¬›â¬›â¬›â¬›ğŸª¦âšªâ¬œâšªâ¬›â¬›â¬›â¬›âšªâ¬œâ¬›â¬›â¬›
  // â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›ğŸª¦ğŸŸ©ğŸ¦šğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›ğŸª¦ğŸŸ©ğŸ¦šğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›ğŸª¦ğŸ¦šğŸŸ©ğŸ¦šâšªğŸª¦â¬›ğŸª¦âšªâ¬œâšªâ¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬œâšªğŸª¦â¬›â¬›â¬›
  // â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šâ¬›ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›
  // â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸª¦ğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›
  // â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©ğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸŸ©ğŸ¦šğŸª¦ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›â¬›ğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸª¦ğŸ¦šâ¬›â¬›â¬›â¬›â¬›ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸ¦šğŸŸ©ğŸª¦ğŸ¦šğŸª¦ğŸ¦šğŸª¦â¬›â¬›
  // Moves left/right; only head is vulnerable; following segments become heads once previous head is destroyed
 public:
  Caterpillar(geometry::Position position);

  virtual void update(AbstractSoundManager& sound_manager, const geometry::Rectangle& player_rect, Level& level) override;
  virtual std::vector<std::pair<geometry::Position, Sprite>> get_sprites(const Level& level) const override;
  virtual int get_points() const override { return 1000; }
  virtual bool is_tough() const override
  {  // only head of caterpillar vulnerable
    return rank_ > 0;
  }
  virtual void on_death(AbstractSoundManager& sound_manager, Level& level) override;
  void set_child(Caterpillar& child);

 private:
  // Rank 0 = head
  int rank_ = 0;
  bool left_ = true;
  int frame_ = 0;
  Caterpillar* child_ = nullptr;
};
